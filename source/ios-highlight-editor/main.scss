@import 'uniform-ui';
// @import '../../bower_components/dragdealer/src/dragdealer';

// Fonts

@font-face {
  font-family: 'united-sans';
  font-weight: regular;
  font-style: normal;
  src: url('UnitedSansRgBd.otf');
}

@font-face {
  font-family: 'vitesse-light';
  font-weight: light;
  font-style: normal;
  src: url('VitesseLight.otf');
}

// Theming
$themes: (
	cool-blue: (light-blue, rgba(0, 143, 214, 1.0)),
	fruit-punch: (red, rgba(217, 43, 43, 1.0)),
	frost-glacier-cherry: (gray, rgba(148, 148, 148, 1.0)),
	fierce-blue-cherry: (blue, rgba(27, 71, 202, 1.0)),
	fierce-green-apple: (dark-green, rgba(10, 166, 45, 1.0)),
	orange: (orange, rgba(255, 119, 0, 1.0)),
	frost-riptide-rush: (purple, rgba(130, 108, 196, 1.0)),
	lemonade: (yellow, rgba(255, 216, 0, 1.0))
);

@each $color-name, $color-values in $themes { // for each color, $color-name is the key, $color-values are the two values
	.theme-#{$color-name},
	.theme-#{nth($color-values, 1)} { // fancy syntax for returning value at 1st index
		.background {
			background-image: url(bg-#{$color-name}.jpg);
		}

		h1 {
			color: #{nth($color-values, 2)}; // fancy syntax for returning value at 2nd index
		}

		.stripe-foreground {
			background-color: #{nth($color-values, 2)};
		}

		.stripe-background__theme {
			background-color: #{nth($color-values, 2)};
		}
	}
}

$color-default-theme: nth(map-get($themes, orange), 2); // default theme is orange
$color-black: #000;
$color-white: #fff;
$color-gray: #6D6D6D;
$color-gray-2: darken($color-gray, 20%);
$color-gray-alpha: rgba($color-gray, 0.75);
$color-gray-2-alpha: rgba($color-gray-2, 0.75);
$color-orange-accent: #FF4D00; // custom orange color for lower third

$spacer: 16px;

$z-1: 100;
$z-2: 200;
$z-3: 300;
$z-4: 400;
$z-5: 500;

$trans-quick: 0.25s;

$skew: 7deg;

@mixin skew-offset() {
	transform: skewX(-$skew)
}

body {
  color: $color-white;
  display: flex;
  align-items: center;
  justify-content: center;
}

.derp {
  color: black;
}

.video-container {
  position: absolute;
  top: 0;
  left: 42px; // hardcode city
  transform: scale(0.376) translateX(50px); // harcode city
  transform-origin: 0 0;

  width: 1280px;
  height: 720px;
	background-image: url(fake-bg.jpg);
	background-size: cover;
	display: flex;
	align-items: flex-end;
	justify-content: flex-end;
  overflow: hidden;
  transition: $trans-quick;

  &._is-editing {
    transform: scale(0.376) translateX(0);
  }

	&.bottom-right {
		align-items: flex-end;
		justify-content: flex-end;
	}

	&.bottom-left {
		align-items: flex-end;
		justify-content: flex-start;
	}

	&.top-right {
		align-items: flex-start;
		justify-content: flex-end;
	}

	&.top-left {
		align-items: flex-start;
		justify-content: flex-start;
	}

  video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
  }
}

.video-lower-third {
	position: relative;
	display: flex;
	align-items: flex-start;
	padding: $spacer*2;
	transform: skewX($skew);
  opacity: 0;
  transition: $trans-quick;

  &._is-active {
    opacity: 1;
  }
}

.logo {
	height: $spacer*6.25;
	width: $spacer*6;
	display: flex;
	align-items: center;
	justify-content: center;
	flex: 0 0 auto;
	background: url(noise.png), radial-gradient(circle at top right, $color-gray-alpha, rgba(black, 0.9));
	background-size: 100px, auto;
	background-blend-mode: overlay;

	img {
		width: $spacer*4;
		height: auto;
		@include skew-offset();
	}
}

.divider {
	width: 2px;
	background-color: $color-white;
	align-self: stretch;
	position: relative;
	flex: 0 0 auto;

	// Divider needs to extend up past the top of the element
	// This is the least hacky way I could think of
	&:before {
		content: '';
		position: absolute;
		bottom: 100%;
		left: 0;
		width: 2px;
		height: $spacer;
		background-color: $color-white;
	}

	&:after {
		content: '';
		position: absolute;
		top: 100%;
		left: 0;
		width: 2px;
		height: $spacer;
		background-color: $color-white;
	}
}

.content {
	display: flex;
	flex: 1 1 auto;
	position: relative;
	margin-top: $spacer;
	margin-bottom: $spacer;
	background: url(noise.png), linear-gradient(-35deg, $color-gray-2-alpha 0%, $color-gray-alpha 10%, $color-gray-alpha 20%, rgba(black, 0.9) 70%);
	background-size: 100px, auto;
	background-blend-mode: overlay;
  padding: $spacer $spacer $spacer/2 $spacer;

	textarea {
		box-sizing: content-box;
		padding: 0;
		position: relative;
		text-transform: uppercase;
		font-family: "vitesse-light";
		font-size: 60px;
		line-height: 60px;
		height: 56px;
		min-height: 56px;
		background: transparent;
		outline: 0;
		margin: 0;
		color: $color-white;
		border: 0;
		width: auto;
		resize: none;
		max-height: 120px;
		// background-color: gray;
		@include skew-offset();
    transition: $trans-quick;

    &:focus {
      background-color: rgba($color-utility-action, 0.4);
    }

    &::-webkit-input-placeholder { /* Chrome/Opera/Safari */
      color: rgba($color-white, 0.5);
    }
    &::-moz-placeholder { /* Firefox 19+ */
      color: rgba($color-white, 0.5);
    }
    &:-ms-input-placeholder { /* IE 10+ */
      color: rgba($color-white, 0.5);
    }
    &:-moz-placeholder { /* Firefox 18- */
      color: rgba($color-white, 0.5);
    }
	}

	&:after {
		content: '';
		position: absolute;
		top: 100%;
		left: 0;
		height: $spacer;
		width: 100%;
		background: rgba($color-orange-accent, .75);
	}
}

// iOS Prototype Code Below This Point

.editor-container {
	width: 667px;
	height: 375px;
  position: relative;
  display: flex;
  flex-direction: column;
  background-image: url(fake-reel.jpg);
  background-size: 100%;
  overflow: hidden;

  svg {
    fill: $color-white;
  }
}

.editor-container-inner {
  height: 100%;
  position: absolute;
  position: relative;
  display: flex;
  flex-direction: column;
  background: #000;
  transition: 0.4s;

  .initial & {
    transform: translateY(100%);
  }
}

.editor-navbar {
	background: $color-de-bg-level3;
	height: 44px;
	display: flex;
	align-items: center;
	justify-content: space-between;
	padding: 0 20px;
  flex: 0 0 auto;
}

.editor-main {
	display: flex;
  flex: 1 1 auto;
  position: relative;
}

.editor-video-and-timeline {
	flex: 1 1 auto;
  display: flex;
  justify-content: flex-end;
  flex-direction: column;
}

@mixin editor-fx-tray-base($bg-color) {
  background-color: $bg-color;
  flex: 0 0 auto;
  width: 50px;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  align-items: center;
  list-style-type: none;
  position: relative;
  transition: $trans-quick;

  &._is-inactive {
    transform: translateX(100%);
  }

  svg {
    width: 24px;
    height: 24px;
    transition: $trans-quick;
  }

  li {
    padding: $spacer/2;
    &._is-active svg {
      fill: $color-utility-action;
    }
  }
}

.editor-fx-tray-1 {
  z-index: $z-1;
  @include editor-fx-tray-base($color-de-bg-level2);
  // border-left: 1px solid $color-de-bg-level2-accent;
}

.editor-fx-tray-2 {
  @include editor-fx-tray-base($color-de-bg-level1);
  z-index: 0;
  // border-left: 1px solid $color-de-bg-level1-accent;

}

.editor-timeline {
  height: 60px;
  position: relative;
  background-color: $color-de-bg-level0;
  width: calc(100% + 50px); // width of effects tray
}

.editor-timeline-ticks {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: space-around;
  align-items: flex-start;
  z-index: $z-1;

  .tick {
    height: calc(100% - #{$space-quarter});
    width: 1px;
    background-color: $color-de-bg-level1-accent;
    display: flex;
    justify-content: center;
    align-items: flex-start;
  }

  span {
    text-align: center;
    color: $color-de-text-nonessential;
    font-size: 10px;
    display: block;
    padding: $space-quarter;
    background-color: $color-de-bg-level0;
  }
}

.editor-timeline-rows {
  position: absolute;
  top: $space-one;
  left: 0;
  width: 100%;
  height: calc(100% - #{$space-one});
  display: flex;
  flex-direction: column;
  padding: 2px;
  z-index: $z-2;

  ._is-trimming & {
    z-index: $z-4;
  }
}

.editor-timeline-row {
  position: relative;
  flex: 1 1 auto;
  transition: $trans-quick;

  &:first-child {
    margin-bottom: 2px;
  }
}

.editor-duration-indication {
  left: 0%;
  width: 60%;
  height: 100%;
  position: absolute;
  transition: $trans-quick;
  transition-delay: $trans-quick/2;
  top: 0;
  border-radius: 2px;
  background-color: rgba($color-de-bg-level3, 0.6);
  backface-visibility: hidden;

  &._is-inactive {
    opacity: 0;
  }

  &._text {
    z-index: $z-4;
    ._is-trimming & {
      background-color: rgba($color-utility-action, 0.6);
      border-radius: 0;
      height: 60px;
      transition-delay: 0;
      transform: translateY(-1.125rem);
    }
  }

  .effect-indicator-icon {
    position: absolute;
    top: 1px;
    left: 4px;
    backface-visibility: hidden;
    transform: translateX(0);

    svg {
      width: $space-one;
      height: $space-one;
      transition: $trans-quick;
      fill: $color-de-text-subtle;
    }
  }
}

.editor-shadow-indication {
  position: absolute;
  width: 2px;
  display: flex;
  justify-content: center;
  z-index: $z-2;
  left: 20%;
  top: 0;
  // margin-top: -12px;

  figure {
    position: relative;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: $color-de-bg-level3-accent;
    border-radius: 50%;
    flex: 0 0 auto;
    z-index: $z-4;

    &:after {
      content: '';
      z-index: $z-1;
      position: absolute;
      width: 0;
      height: 0;
      top: 14px;
      left: 0px;
      border-left: 12px solid transparent;
      border-right: 12px solid transparent;
      border-top: 44px solid $color-de-bg-level3-accent;
    }

    // &:before {
    //   content: '';
    //   z-index: $z-1;
    //   position: absolute;
    //   width: 0;
    //   height: 0;
    //   bottom: 8px;
    //   left: 4px;
    //   border-left: 8px solid transparent;
    //   border-right: 8px solid transparent;
    //   border-bottom: 32px solid $color-identity-orange;
    // }

    svg {
      position: relative;
      z-index: $z-2;
      fill: $color-de-text-subtle;
      width: 16px;
      height: 16px;
      transform: translateX(0);
    }
  }

  &._is-active {
    figure {
      background-color: $color-utility-action;
      &:after {
        border-top-color: $color-utility-action;
      }
      &:before {
        border-bottom-color: $color-utility-action;
      }
    }

  }
}

@mixin trim-handle-base {
  position: absolute;
  width: 24px;
  height: 60px;
  background-size: 100% 100%;
  overflow: hidden;

  .trim-inner {
    width: 24px;
    height: 60px;
    background-size: 100% 100%;
    transition: $trans-quick;

    ._is-trimming & {
      transition-delay: $trans-quick/2;
    }
  }
}

.trim-handle-left {
  @include trim-handle-base();
  right: 100%;

  .trim-inner {
    transform: translateX(100%);
    background-image: url('img/trim-grip-left.png');

    ._is-trimming & {
      transform: translateX(0);
    }
  }
}

.trim-handle-right {
  @include trim-handle-base();
  left: 100%;

  .trim-inner {
    transform: translateX(-100%);
    background-image: url('img/trim-grip-right.png');

    ._is-trimming & {
      transform: translateX(0);
    }
  }
}

.hotspot {
  // background-color: rgba(red, .5);
  position: absolute;
  bottom: 12px;
  height: 60px;
  width: 42px;
  left: 216px;
}
